name: Auto Update Versions
permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    # 每週一早上 8:00 UTC 執行
    - cron: '0 8 * * 1'
  workflow_dispatch:
    inputs:
      force_update:
        description: '強制更新版本'
        required: false
        default: false
        type: boolean
      target_versions:
        description: '指定版本 (用空格分隔，如: 1.21.6 1.21.7)'
        required: false
        type: string

jobs:
  check-and-update-versions:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Fetch and check for updates
      id: check
      run: |
        echo "🔍 獲取最新版本數據..."
        
        # 動態獲取最新版本數據
        python scripts/fetch-latest-versions.py --output json > new_versions.json
        
        # 如果動態獲取失敗，使用現有數據
        if [ ! -s new_versions.json ] || ! python -m json.tool new_versions.json > /dev/null 2>&1; then
          echo "⚠️ 動態獲取失敗，使用現有數據..."
          cp data/latest_versions.json new_versions.json
        else
          echo "✅ 成功獲取最新版本數據"
        fi
        
        # 比較版本差異
        python << 'EOF'
        import json
        import os
        
        # 讀取新舊版本數據
        with open('new_versions.json', 'r') as f:
            new_data = json.load(f)
        
        try:
            with open('data/latest_versions.json', 'r') as f:
                old_data = json.load(f)
        except FileNotFoundError:
            old_data = {}
        
        # 檢查是否有更新
        has_updates = False
        updates = []
        
        for version, new_info in new_data.items():
            if version not in old_data:
                updates.append(f"{version}(NEW)")
                has_updates = True
            else:
                old_info = old_data[version]
                changes = []
                for key in ['yarn_mappings', 'fabric_api', 'paper', 'data_version']:
                    if old_info.get(key) != new_info.get(key):
                        changes.append(key)
                        has_updates = True
                
                if changes:
                    updates.append(f"{version}({','.join(changes)})")
        
        # 強制更新檢查
        if '${{ github.event.inputs.force_update }}' == 'true':
            has_updates = True
            updates.append("FORCE")
        
        # 輸出結果
        github_output = os.environ.get('GITHUB_OUTPUT')
        if github_output:
            with open(github_output, 'a') as f:
                f.write(f'has_updates={str(has_updates).lower()}\n')
                f.write(f'updates={" ".join(updates)}\n')
        
        print(f'有更新: {has_updates}')
        print(f'更新項目: {", ".join(updates) if updates else "無"}')
        EOF
        
    - name: Create Pull Request for updates
      if: steps.check.outputs.has_updates == 'true'
      run: |
        # 設置 Git 配置
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 更新數據文件
        cp new_versions.json data/latest_versions.json
        
        # 檢查是否有變更
        if git diff --quiet data/latest_versions.json; then
          echo "數據文件沒有變更"
          exit 0
        fi
        
        # 創建新分支
        BRANCH_NAME="auto-update-versions-$(date +%Y%m%d-%H%M%S)"
        echo "🌿 創建分支: $BRANCH_NAME"
        git checkout -b "$BRANCH_NAME"
        
        # 提交變更
        git add data/latest_versions.json
        git commit -m "🔄 自動更新版本數據

        更新項目: ${{ steps.check.outputs.updates }}
        更新時間: $(date -u)
        
        - 更新 data/latest_versions.json
        
        由 GitHub Actions 自動生成"
        
        # 推送分支
        echo "📤 推送分支..."
        git push origin "$BRANCH_NAME"
        
        # 創建 PR
        echo "🔃 創建 Pull Request..."
        gh pr create \
          --title "🔄 自動更新版本數據 - ${{ steps.check.outputs.updates }}" \
          --body "## 🎯 自動版本數據更新

        **更新項目:** ${{ steps.check.outputs.updates }}

        ### 📋 變更內容
        - ✅ 更新 \`data/latest_versions.json\` 版本數據
        - 🔄 所有工作流程將自動使用新版本數據

        ### 🚀 下一步
        - [ ] 審查版本變更
        - [ ] 測試構建流程
        - [ ] 合併 PR

        ---
        *此 PR 由 GitHub Actions 自動創建於 $(date -u)*" \
          --assignee "@me" \
          --label "enhancement,auto-update,version-update"
        
        echo "✅ Pull Request 已創建"