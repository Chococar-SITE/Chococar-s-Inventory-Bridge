name: Build Multi-Version JAR Files

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: false
        default: 'snapshot'
        type: choice
        options:
        - snapshot
        - release

jobs:
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.versions.outputs.versions }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Get supported versions
      id: versions
      run: |
        python << 'EOF'
        import json
        import os
        
        with open('data/latest_versions.json', 'r') as f:
            versions_data = json.load(f)
        
        complete_versions = [v for v, data in versions_data.items() if data['status'] == 'complete']
        complete_versions.sort(key=lambda x: [int(i) for i in x.split('.')], reverse=True)
        
        print(f"支援的版本: {', '.join(complete_versions)}")
        
        github_output = os.environ.get('GITHUB_OUTPUT')
        if github_output:
            with open(github_output, 'a') as f:
                f.write(f'versions={json.dumps(complete_versions)}\n')
        EOF

  test-units:
    needs: get-versions
    runs-on: ubuntu-latest
    
    name: Run Unit Tests
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate Gradle wrapper
      uses: gradle/actions/wrapper-validation@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        cache-cleanup: on-success
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-test-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-test-
          ${{ runner.os }}-gradle-
          
    - name: Run Common module tests
      run: |
        echo "🧪 運行 Common 模組單元測試..."
        ./gradlew :common:test --no-daemon --continue
        
    - name: Run Paper module tests
      run: |
        echo "🧪 運行 Paper 模組單元測試..."
        ./gradlew :paper:test --no-daemon --continue
        
    - name: Run Fabric module tests
      run: |
        echo "🧪 運行 Fabric 模組單元測試..."
        # 注意：Fabric 測試由於 Minecraft 環境依賴，僅運行編譯檢查
        ./gradlew :fabric:compileTestJava --no-daemon
        echo "✅ Fabric 測試編譯成功（跳過運行階段，因 Minecraft 環境依賴）"
        
    - name: Generate test reports
      if: always()
      run: |
        echo "📊 生成測試報告摘要..."
        
        # 檢查各模組測試結果
        if [ -d "common/build/test-results/test" ]; then
          echo "📋 Common 模組測試結果："
          find common/build/test-results/test -name "*.xml" -exec grep -l "failures=\"0\" errors=\"0\"" {} \; | wc -l | xargs echo "  ✅ 通過的測試套件："
          find common/build/test-results/test -name "*.xml" -exec grep -L "failures=\"0\" errors=\"0\"" {} \; | wc -l | xargs echo "  ❌ 失敗的測試套件："
        fi
        
        if [ -d "paper/build/test-results/test" ]; then
          echo "📋 Paper 模組測試結果："
          find paper/build/test-results/test -name "*.xml" -exec grep -l "failures=\"0\" errors=\"0\"" {} \; | wc -l | xargs echo "  ✅ 通過的測試套件："
          find paper/build/test-results/test -name "*.xml" -exec grep -L "failures=\"0\" errors=\"0\"" {} \; | wc -l | xargs echo "  ❌ 失敗的測試套件："
        fi
        
        echo "📋 Fabric 模組："
        echo "  ✅ 編譯檢查通過"
        echo "  ⚠️ 運行測試跳過（需要 Minecraft 環境）"
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/build/test-results/test/**/*.xml
          **/build/reports/tests/test/**/*
        retention-days: 7
        
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Unit Test Results
        path: '**/build/test-results/test/**/*.xml'
        reporter: java-junit
        fail-on-error: false
        
    - name: Test summary
      if: always()
      run: |
        echo "## 🧪 單元測試摘要" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| 模組 | 狀態 | 備註 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|------|" >> $GITHUB_STEP_SUMMARY
        
        # Common 模組
        if [ -d "common/build/test-results/test" ]; then
          COMMON_TESTS=$(find common/build/test-results/test -name "*.xml" | wc -l)
          COMMON_PASSED=$(find common/build/test-results/test -name "*.xml" -exec grep -l "failures=\"0\" errors=\"0\"" {} \; 2>/dev/null | wc -l)
          echo "| Common | ✅ 通過 | $COMMON_PASSED/$COMMON_TESTS 測試套件通過 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Common | ❌ 失敗 | 測試結果檔案未找到 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Paper 模組
        if [ -d "paper/build/test-results/test" ]; then
          PAPER_TESTS=$(find paper/build/test-results/test -name "*.xml" | wc -l)
          PAPER_PASSED=$(find paper/build/test-results/test -name "*.xml" -exec grep -l "failures=\"0\" errors=\"0\"" {} \; 2>/dev/null | wc -l)
          echo "| Paper | ✅ 通過 | $PAPER_PASSED/$PAPER_TESTS 測試套件通過 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Paper | ❌ 失敗 | 測試結果檔案未找到 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Fabric 模組
        echo "| Fabric | ⚠️ 部分 | 編譯檢查通過，運行測試需 Minecraft 環境 |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📋 **詳細測試報告**: 請查看 Actions 頁面的 'Unit Test Results' 報告" >> $GITHUB_STEP_SUMMARY

  build-matrix:
    needs: [get-versions, test-units]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - fabric
          - paper
        mc_version: ${{ fromJson(needs.get-versions.outputs.versions) }}
    
    name: Build ${{ matrix.platform }} for MC ${{ matrix.mc_version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate Gradle wrapper
      uses: gradle/actions/wrapper-validation@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        cache-cleanup: on-success
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Load version data for MC ${{ matrix.mc_version }}
      run: |
        echo "📋 讀取 MC ${{ matrix.mc_version }} 版本數據..."
        
        # 讀取並解析版本數據
        python << 'EOF'
        import json
        import os
        
        mc_version = "${{ matrix.mc_version }}"
        
        with open('data/latest_versions.json', 'r') as f:
            versions_data = json.load(f)
        
        if mc_version not in versions_data:
            print(f"❌ 版本 {mc_version} 不存在於數據中")
            exit(1)
        
        data = versions_data[mc_version]
        
        if data['status'] != 'complete':
            print(f"❌ 版本 {mc_version} 狀態不完整: {data['status']}")
            exit(1)
        
        print(f"🔧 構建 {mc_version}...")
        
        # 設定基本版本號
        if "${{ github.ref }}".startswith("refs/tags/"):
            version = "${{ github.ref }}".split("/")[-1].replace("v", "")
        else:
            version = f"1.0.0-SNAPSHOT+mc{mc_version}"
        
        artifact_name = f"chococars-inventory-bridge-${{ matrix.platform }}-{mc_version}-{version}"
        
        print(f"構建配置:")
        print(f"  Minecraft: {mc_version}")
        print(f"  Yarn: {data['yarn_mappings']}")
        print(f"  Fabric API: {data['fabric_api']}")
        print(f"  Paper: {data['paper']}")
        print(f"  Data Version: {data['data_version']}")
        print(f"  Artifact: {artifact_name}")
        
        # 設置環境變量
        with open(os.environ['GITHUB_ENV'], 'a') as env_file:
            env_file.write(f"MC_VERSION={mc_version}\n")
            env_file.write(f"YARN_VERSION={data['yarn_mappings']}\n")
            env_file.write(f"FABRIC_API_VERSION={data['fabric_api']}\n")
            env_file.write(f"PAPER_VERSION={data['paper']}\n")
            env_file.write(f"DATA_VERSION={data['data_version']}\n")
            env_file.write(f"VERSION={version}\n")
            env_file.write(f"ARTIFACT_NAME={artifact_name}\n")
        EOF
        
    - name: Update version configurations
      run: |
        # 更新 gradle.properties
        cat > gradle.properties << EOF
        org.gradle.jvmargs=-Xmx4G
        minecraft_version=$MC_VERSION
        yarn_mappings=$YARN_VERSION
        loader_version=0.16.9
        mod_version=$VERSION
        maven_group=site.chococar
        archives_base_name=chococars-inventory-bridge
        fabric_version=$FABRIC_API_VERSION
        paper_version=$PAPER_VERSION
        data_version=$DATA_VERSION
        EOF
        
        # 更新配置文件中的版本
        find . -name "*.yml" -type f -exec sed -i "s/minecraftVersion: \"1.21.8\"/minecraftVersion: \"$MC_VERSION\"/g" {} \;
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ matrix.mc_version }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-${{ matrix.mc_version }}-
          ${{ runner.os }}-gradle-
          
    - name: Build common module
      run: ./gradlew :common:build --no-daemon
      
    - name: Build Fabric mod
      if: matrix.platform == 'fabric'
      run: |
        # 更新 Fabric 特定版本
        sed -i "s/minecraft \"com.mojang:minecraft:.*\"/minecraft \"com.mojang:minecraft:$MC_VERSION\"/g" fabric/build.gradle
        sed -i "s/mappings \"net.fabricmc:yarn:.*\"/mappings \"net.fabricmc:yarn:$YARN_VERSION:v2\"/g" fabric/build.gradle
        sed -i "s/modImplementation \"net.fabricmc.fabric-api:fabric-api:.*\"/modImplementation \"net.fabricmc.fabric-api:fabric-api:$FABRIC_API_VERSION\"/g" fabric/build.gradle
        
        ./gradlew :fabric:build --no-daemon
        
    - name: Build Paper plugin
      if: matrix.platform == 'paper'
      run: |
        # 更新 Paper 特定版本
        sed -i "s/paperweight.paperDevBundle(\".*\")/paperweight.paperDevBundle(\"$PAPER_VERSION\")/g" paper/build.gradle
        
        ./gradlew :paper:build --no-daemon
        
    - name: Rename artifacts
      run: |
        if [ "${{ matrix.platform }}" == "fabric" ]; then
          BUILD_DIR="fabric/build/libs"
          ORIGINAL_JAR=$(find $BUILD_DIR -name "*.jar" ! -name "*-dev.jar" ! -name "*-sources.jar" | head -n 1)
        else
          BUILD_DIR="paper/build/libs"
          ORIGINAL_JAR=$(find $BUILD_DIR -name "*.jar" ! -name "*-dev.jar" ! -name "*-sources.jar" | head -n 1)
        fi
        
        if [ -f "$ORIGINAL_JAR" ]; then
          mv "$ORIGINAL_JAR" "$BUILD_DIR/$ARTIFACT_NAME.jar"
          echo "Renamed to: $ARTIFACT_NAME.jar"
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: |
          ${{ matrix.platform }}/build/libs/${{ env.ARTIFACT_NAME }}.jar
        retention-days: 30
        
    - name: Test JAR file
      run: |
        BUILD_DIR="${{ matrix.platform }}/build/libs"
        JAR_FILE="$BUILD_DIR/$ARTIFACT_NAME.jar"
        
        if [ -f "$JAR_FILE" ]; then
          echo "✅ JAR file created successfully: $JAR_FILE"
          echo "📦 File size: $(du -h "$JAR_FILE" | cut -f1)"
          
          # 檢查 JAR 內容
          if [ "${{ matrix.platform }}" == "fabric" ]; then
            echo "🔍 Checking Fabric mod.json..."
            unzip -l "$JAR_FILE" | grep -E "(fabric.mod.json|mixins.json)" || echo "⚠️ Missing Fabric metadata"
          else
            echo "🔍 Checking Paper plugin.yml..."
            unzip -l "$JAR_FILE" | grep "paper-plugin.yml" || echo "⚠️ Missing Paper plugin.yml"
          fi
        else
          echo "❌ JAR file not found: $JAR_FILE"
          exit 1
        fi

  test-fabric-server:
    needs: [get-versions, test-units, build-matrix]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get latest version and set up environment
      run: |
        echo "📋 獲取最新版本進行測試..."
        python << 'EOF'
        import json
        import os
        
        with open('data/latest_versions.json', 'r') as f:
            versions_data = json.load(f)
        
        complete_versions = [v for v, data in versions_data.items() if data['status'] == 'complete']
        complete_versions.sort(key=lambda x: [int(i) for i in x.split('.')], reverse=True)
        
        if not complete_versions:
            print("❌ 沒有找到完整的版本")
            exit(1)
            
        latest_version = complete_versions[0]
        data = versions_data[latest_version]
        
        print(f"🎯 選擇最新版本進行測試: {latest_version}")
        
        # 獲取最新的 Fabric Loader 版本
        import urllib.request
        import json as json_lib
        
        try:
            with urllib.request.urlopen('https://meta.fabricmc.net/v2/versions/loader') as response:
                loader_data = json_lib.loads(response.read())
                latest_loader = loader_data[0]['version']  # 第一個是最新的穩定版
                print(f"📦 最新 Fabric Loader 版本: {latest_loader}")
        except Exception as e:
            print(f"⚠️ 無法獲取最新 Loader 版本，使用預設值: {e}")
            latest_loader = "0.16.9"  # 備用版本
        
        with open(os.environ['GITHUB_ENV'], 'a') as env_file:
            env_file.write(f"MC_VERSION={latest_version}\n")
            env_file.write(f"FABRIC_API_VERSION={data['fabric_api']}\n")
            env_file.write(f"LOADER_VERSION={latest_loader}\n")
            env_file.write(f"ARTIFACT_PATTERN=chococars-inventory-bridge-fabric-{latest_version}-*\n")
        EOF
        
    - name: Download latest Fabric artifact
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ env.ARTIFACT_PATTERN }}
        path: test-server/
        merge-multiple: true
        
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Setup Minecraft Fabric Server
      run: |
        mkdir -p test-server
        cd test-server
        
        # 下載 Minecraft server jar
        echo "📥 下載 Minecraft $MC_VERSION server..."
        wget -O server.jar "https://piston-data.mojang.com/v1/objects/$(curl -s https://piston-meta.mojang.com/mc/game/version_manifest_v2.json | jq -r ".versions[] | select(.id==\"$MC_VERSION\") | .url" | xargs curl -s | jq -r '.downloads.server.url' | sed 's|.*objects/\([^/]*\)/.*|\1|')/server.jar" || {
          echo "❌ 無法下載 Minecraft server"
          exit 1
        }
        
        # 下載 Fabric installer
        echo "📥 下載 Fabric installer..."
        wget -O fabric-installer.jar "https://maven.fabricmc.net/net/fabricmc/fabric-installer/1.0.1/fabric-installer-1.0.1.jar"
        
        # 安裝 Fabric server
        echo "🔧 安裝 Fabric server..."
        java -jar fabric-installer.jar server -mcversion $MC_VERSION -loader $LOADER_VERSION -downloadMinecraft
        
        # 檢查生成的 server jar 文件名
        echo "📋 檢查生成的文件..."
        ls -la *.jar || true
        
        # 找到正確的 server jar 文件
        SERVER_JAR=$(find . -name "fabric-server-*.jar" | head -n 1)
        if [ -z "$SERVER_JAR" ]; then
          echo "❌ 找不到 Fabric server jar 文件"
          exit 1
        fi
        echo "✅ 找到 server jar: $SERVER_JAR"
        echo "SERVER_JAR_NAME=$(basename $SERVER_JAR)" >> $GITHUB_ENV
        
        # 創建 mods 目錄並複製我們的模組
        mkdir -p mods
        
        # 下載 Fabric API
        echo "📥 下載 Fabric API $FABRIC_API_VERSION..."
        
        # 提取版本號 (例如 "0.131.0+1.21.8" -> "0.131.0")
        API_VERSION_ONLY=$(echo "$FABRIC_API_VERSION" | cut -d'+' -f1)
        
        # 嘗試多個可能的下載源
        DOWNLOAD_SUCCESS=false
        
        # 方法1: Maven repository
        MAVEN_URL="https://maven.fabricmc.net/net/fabricmc/fabric-api/fabric-api/$FABRIC_API_VERSION/fabric-api-$FABRIC_API_VERSION.jar"
        echo "🔍 嘗試 Maven: $MAVEN_URL"
        if wget -O "mods/fabric-api-$FABRIC_API_VERSION.jar" "$MAVEN_URL" 2>/dev/null; then
          echo "✅ 從 Maven 成功下載 Fabric API"
          DOWNLOAD_SUCCESS=true
        else
          # 方法2: GitHub releases (使用版本號)
          GITHUB_URL="https://github.com/FabricMC/fabric/releases/download/v$API_VERSION_ONLY/fabric-api-$FABRIC_API_VERSION.jar"
          echo "🔍 嘗試 GitHub: $GITHUB_URL"
          if wget -O "mods/fabric-api-$FABRIC_API_VERSION.jar" "$GITHUB_URL" 2>/dev/null; then
            echo "✅ 從 GitHub 成功下載 Fabric API"
            DOWNLOAD_SUCCESS=true
          fi
        fi
        
        if [ "$DOWNLOAD_SUCCESS" = false ]; then
          echo "❌ 無法下載 Fabric API，測試將失敗"
          echo "🔍 嘗試的 URL:"
          echo "  - $MAVEN_URL"
          echo "  - $GITHUB_URL"
          rm -f "mods/fabric-api-$FABRIC_API_VERSION.jar" 2>/dev/null || true
        fi
        
        # 複製我們的模組
        find . -name "*.jar" -path "*/chococars-inventory-bridge-*" -exec cp {} mods/ \;
        
        # 創建基本的 server.properties 避免啟動錯誤
        cat > server.properties << EOF
        online-mode=false
        EOF
        
        # 接受 EULA
        echo "eula=true" > eula.txt
        
        echo "✅ 伺服器設置完成"
        
    - name: Test Minecraft Server
      timeout-minutes: 2
      run: |
        cd test-server
        
        echo "🚀 啟動 Minecraft 伺服器進行測試..."
        echo "⏱️ 將運行 60 秒後自動關閉"
        
        # 在背景啟動伺服器
        java -Xmx2G -Xms1G -jar "$SERVER_JAR_NAME" nogui > server.log 2>&1 &
        SERVER_PID=$!
        
        echo "📋 伺服器 PID: $SERVER_PID"
        
        # 等待伺服器啟動
        echo "⏳ 等待伺服器啟動..."
        for i in {1..30}; do
          if grep -q "Done" server.log 2>/dev/null; then
            echo "✅ 伺服器啟動成功！"
            break
          fi
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "❌ 伺服器啟動失敗"
            echo "📋 伺服器日誌："
            cat server.log
            exit 1
          fi
          echo "⏳ 等待中... ($i/30)"
          sleep 2
        done
        
        # 檢查是否成功啟動
        if ! grep -q "Done" server.log; then
          echo "❌ Fabric 伺服器啟動超時或失敗"
          echo "📋 伺服器日誌："
          cat server.log
          
          # 檢查是否有 crash report
          echo ""
          echo "🔍 檢查 crash reports..."
          if [ -d "crash-reports" ] && [ "$(ls -A crash-reports 2>/dev/null)" ]; then
            LATEST_CRASH=$(ls -t crash-reports/*.txt 2>/dev/null | head -n 1)
            if [ -f "$LATEST_CRASH" ]; then
              echo "💥 發現 crash report: $(basename "$LATEST_CRASH")"
              echo "📋 Crash Report 摘要："
              echo "────────────────────────────────────────────────────────────────"
              
              # 提取關鍵資訊
              if grep -q "Exception" "$LATEST_CRASH"; then
                echo "🚨 異常類型："
                grep -A 5 -B 2 "Exception\|Error" "$LATEST_CRASH" | head -15
                echo ""
              fi
              
              if grep -q "Caused by:" "$LATEST_CRASH"; then
                echo "🔍 根本原因："
                grep -A 3 "Caused by:" "$LATEST_CRASH" | head -8
                echo ""
              fi
              
              if grep -q "at " "$LATEST_CRASH"; then
                echo "📍 關鍵堆疊追蹤："
                grep "at.*chococar\|at.*fabric\|at.*minecraft" "$LATEST_CRASH" | head -5
                echo ""
              fi
              
              echo "────────────────────────────────────────────────────────────────"
              echo "📄 完整 crash report 文件: $LATEST_CRASH"
            else
              echo "⚠️ crash-reports 目錄存在但無法讀取文件"
            fi
          else
            echo "ℹ️ 未發現 crash reports"
          fi
          
          kill $SERVER_PID 2>/dev/null || true
          exit 1
        fi
        
        # 運行 60 秒並顯示即時日誌
        echo "🎮 伺服器正常運行中，將持續 60 秒..."
        echo "📋 即時伺服器日誌："
        
        # 在背景監控伺服器狀態
        (
          for i in {1..60}; do
            if ! kill -0 $SERVER_PID 2>/dev/null; then
              echo "❌ Fabric 伺服器意外停止"
              
              # 檢查 crash report
              if [ -d "crash-reports" ] && [ "$(ls -A crash-reports 2>/dev/null)" ]; then
                LATEST_CRASH=$(ls -t crash-reports/*.txt 2>/dev/null | head -n 1)
                if [ -f "$LATEST_CRASH" ]; then
                  echo "💥 發現 crash report: $(basename "$LATEST_CRASH")"
                  echo "🔍 根本原因："
                  grep -A 3 "Caused by:" "$LATEST_CRASH" | head -5 || echo "無法提取原因"
                fi
              fi
              exit 1
            fi
            sleep 1
          done
        ) &
        MONITOR_PID=$!
        
        # 顯示即時日誌，直到監控結束
        tail -f server.log &
        TAIL_PID=$!
        
        # 等待監控完成
        wait $MONITOR_PID
        MONITOR_EXIT_CODE=$?
        
        # 停止 tail
        kill $TAIL_PID 2>/dev/null || true
        
        if [ $MONITOR_EXIT_CODE -ne 0 ]; then
          echo "❌ 伺服器運行失敗"
          exit 1
        fi
        
        # 優雅關閉伺服器
        echo "🛑 正在關閉 Fabric 伺服器..."
        
        # 檢查伺服器是否還在運行
        if kill -0 $SERVER_PID 2>/dev/null; then
          # 發送 SIGTERM 信號
          kill -TERM $SERVER_PID 2>/dev/null || true
          
          # 等待最多 10 秒讓伺服器優雅關閉
          for i in {1..10}; do
            if ! kill -0 $SERVER_PID 2>/dev/null; then
              echo "✅ 伺服器已優雅關閉"
              break
            fi
            sleep 1
          done
          
          # 如果還在運行，強制終止
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "⚠️ 強制終止伺服器"
            kill -KILL $SERVER_PID 2>/dev/null || true
          fi
        fi
        
        # 等待進程完全結束
        wait $SERVER_PID 2>/dev/null || true
        
        echo "✅ 測試完成！伺服器成功運行 60 秒"
        echo "📋 檢查模組載入情況..."
        
        if grep -q "chococars_inventory_bridge" server.log; then
          echo "✅ Chococar's Inventory Bridge 模組成功載入"
        else
          echo "⚠️ 未在日誌中找到模組載入記錄"
        fi
        
        # 顯示關鍵日誌
        echo "📋 伺服器啟動日誌摘要："
        grep -E "(Done|ERROR|WARN|chococars)" server.log | tail -20 || true

  test-paper-server:
    needs: [get-versions, test-units, build-matrix]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get latest version and set up environment for Paper
      run: |
        echo "📋 獲取最新版本進行 Paper 測試..."
        python << 'EOF'
        import json
        import os
        
        with open('data/latest_versions.json', 'r') as f:
            versions_data = json.load(f)
        
        complete_versions = [v for v, data in versions_data.items() if data['status'] == 'complete']
        complete_versions.sort(key=lambda x: [int(i) for i in x.split('.')], reverse=True)
        
        if not complete_versions:
            print("❌ 沒有找到完整的版本")
            exit(1)
            
        latest_version = complete_versions[0]
        data = versions_data[latest_version]
        
        print(f"🎯 選擇最新版本進行 Paper 測試: {latest_version}")
        
        with open(os.environ['GITHUB_ENV'], 'a') as env_file:
            env_file.write(f"MC_VERSION={latest_version}\n")
            env_file.write(f"PAPER_VERSION={data['paper']}\n")
            env_file.write(f"ARTIFACT_PATTERN=chococars-inventory-bridge-paper-{latest_version}-*\n")
        EOF
        
    - name: Download latest Paper artifact
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ env.ARTIFACT_PATTERN }}
        path: test-server/
        merge-multiple: true
        
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Setup Minecraft Paper Server
      run: |
        mkdir -p test-server
        cd test-server
        
        # 下載 Paper server jar
        echo "📥 下載 Paper $PAPER_VERSION server..."
        PAPER_BUILD_URL="https://api.papermc.io/v2/projects/paper/versions/$MC_VERSION/builds"
        LATEST_BUILD=$(curl -s "$PAPER_BUILD_URL" | python3 -c 'import sys, json; data = json.load(sys.stdin); print(data["builds"][-1]["build"])' 2>/dev/null || echo "")
        
        if [ -n "$LATEST_BUILD" ]; then
          PAPER_JAR_URL="https://api.papermc.io/v2/projects/paper/versions/$MC_VERSION/builds/$LATEST_BUILD/downloads/paper-$MC_VERSION-$LATEST_BUILD.jar"
          echo "📥 下載 Paper build $LATEST_BUILD..."
          wget -O server.jar "$PAPER_JAR_URL" || {
            echo "❌ 無法下載 Paper server"
            exit 1
          }
        else
          echo "❌ 無法獲取 Paper 構建資訊"
          exit 1
        fi
        
        # 創建 plugins 目錄並複製我們的插件
        mkdir -p plugins
        
        # 複製我們的 Paper 插件
        find . -name "*.jar" -path "*/chococars-inventory-bridge-paper-*" -exec cp {} plugins/ \;
        
        # 創建基本的 server.properties 避免啟動錯誤
        cat > server.properties << EOF
        online-mode=false
        EOF
        
        # 接受 EULA
        echo "eula=true" > eula.txt
        
        echo "✅ Paper 伺服器設置完成"
        
    - name: Test Paper Server
      timeout-minutes: 2
      run: |
        cd test-server
        
        echo "🚀 啟動 Paper 伺服器進行測試..."
        echo "⏱️ 將運行 60 秒後自動關閉"
        
        # 在背景啟動伺服器
        java -Xmx2G -Xms1G -jar server.jar nogui > server.log 2>&1 &
        SERVER_PID=$!
        
        echo "📋 伺服器 PID: $SERVER_PID"
        
        # 等待伺服器啟動
        echo "⏳ 等待 Paper 伺服器啟動..."
        for i in {1..30}; do
          if grep -q "Done" server.log 2>/dev/null; then
            echo "✅ Paper 伺服器啟動成功！"
            break
          fi
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "❌ Paper 伺服器啟動失敗"
            echo "📋 伺服器日誌："
            cat server.log
            exit 1
          fi
          echo "⏳ 等待中... ($i/30)"
          sleep 2
        done
        
        # 檢查是否成功啟動
        if ! grep -q "Done" server.log; then
          echo "❌ Paper 伺服器啟動超時或失敗"
          echo "📋 伺服器日誌："
          cat server.log
          
          # 檢查是否有 crash report
          echo ""
          echo "🔍 檢查 crash reports..."
          if [ -d "crash-reports" ] && [ "$(ls -A crash-reports 2>/dev/null)" ]; then
            LATEST_CRASH=$(ls -t crash-reports/*.txt 2>/dev/null | head -n 1)
            if [ -f "$LATEST_CRASH" ]; then
              echo "💥 發現 crash report: $(basename "$LATEST_CRASH")"
              echo "📋 Crash Report 摘要："
              echo "────────────────────────────────────────────────────────────────"
              
              # 提取關鍵資訊
              if grep -q "Exception" "$LATEST_CRASH"; then
                echo "🚨 異常類型："
                grep -A 5 -B 2 "Exception\|Error" "$LATEST_CRASH" | head -15
                echo ""
              fi
              
              if grep -q "Caused by:" "$LATEST_CRASH"; then
                echo "🔍 根本原因："
                grep -A 3 "Caused by:" "$LATEST_CRASH" | head -8
                echo ""
              fi
              
              if grep -q "at " "$LATEST_CRASH"; then
                echo "📍 關鍵堆疊追蹤："
                grep "at.*chococar\|at.*paper\|at.*minecraft\|at.*bukkit" "$LATEST_CRASH" | head -5
                echo ""
              fi
              
              echo "────────────────────────────────────────────────────────────────"
              echo "📄 完整 crash report 文件: $LATEST_CRASH"
            else
              echo "⚠️ crash-reports 目錄存在但無法讀取文件"
            fi
          else
            echo "ℹ️ 未發現 crash reports"
          fi
          
          kill $SERVER_PID 2>/dev/null || true
          exit 1
        fi
        
        # 運行 60 秒並顯示即時日誌
        echo "🎮 Paper 伺服器正常運行中，將持續 60 秒..."
        echo "📋 即時 Paper 伺服器日誌："
        
        # 在背景監控伺服器狀態
        (
          for i in {1..60}; do
            if ! kill -0 $SERVER_PID 2>/dev/null; then
              echo "❌ Paper 伺服器意外停止"
              
              # 檢查 crash report
              if [ -d "crash-reports" ] && [ "$(ls -A crash-reports 2>/dev/null)" ]; then
                LATEST_CRASH=$(ls -t crash-reports/*.txt 2>/dev/null | head -n 1)
                if [ -f "$LATEST_CRASH" ]; then
                  echo "💥 發現 crash report: $(basename "$LATEST_CRASH")"
                  echo "🔍 根本原因："
                  grep -A 3 "Caused by:" "$LATEST_CRASH" | head -5 || echo "無法提取原因"
                fi
              fi
              exit 1
            fi
            sleep 1
          done
        ) &
        MONITOR_PID=$!
        
        # 顯示即時日誌，直到監控結束
        tail -f server.log &
        TAIL_PID=$!
        
        # 等待監控完成
        wait $MONITOR_PID
        MONITOR_EXIT_CODE=$?
        
        # 停止 tail
        kill $TAIL_PID 2>/dev/null || true
        
        if [ $MONITOR_EXIT_CODE -ne 0 ]; then
          echo "❌ Paper 伺服器運行失敗"
          exit 1
        fi
        
        # 優雅關閉伺服器
        echo "🛑 正在關閉 Paper 伺服器..."
        
        # 檢查伺服器是否還在運行
        if kill -0 $SERVER_PID 2>/dev/null; then
          # 發送 SIGTERM 信號
          kill -TERM $SERVER_PID 2>/dev/null || true
          
          # 等待最多 10 秒讓伺服器優雅關閉
          for i in {1..10}; do
            if ! kill -0 $SERVER_PID 2>/dev/null; then
              echo "✅ Paper 伺服器已優雅關閉"
              break
            fi
            sleep 1
          done
          
          # 如果還在運行，強制終止
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "⚠️ 強制終止 Paper 伺服器"
            kill -KILL $SERVER_PID 2>/dev/null || true
          fi
        fi
        
        # 等待進程完全結束
        wait $SERVER_PID 2>/dev/null || true
        
        echo "✅ Paper 測試完成！伺服器成功運行 60 秒"
        echo "📋 檢查插件載入情況..."
        
        if grep -q -i "chococar\|inventory.*bridge" server.log; then
          echo "✅ Chococar's Inventory Bridge 插件成功載入"
        else
          echo "⚠️ 未在日誌中找到插件載入記錄"
        fi
        
        # 顯示關鍵日誌
        echo "📋 Paper 伺服器啟動日誌摘要："
        grep -E "(Done|ERROR|WARN|chococar)" server.log | tail -20 || true

  create-release:
    needs: [get-versions, test-units, build-matrix]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.release_type == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: artifacts/**/*.jar
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Chococar's Inventory Bridge Release
          
          這個版本包含對 Minecraft 1.21.4 到 1.21.8 的完整支援。
          
          ### 支援的版本
          - Minecraft 1.21.4, 1.21.5, 1.21.6, 1.21.7, 1.21.8
          - Java 21+
          
          ### 平台支援
          - ✅ Fabric 模組
          - ✅ Paper 插件
          
          ### 安裝說明
          1. 選擇對應您的 Minecraft 版本和平台的 JAR 文件
          2. 將 JAR 文件放入對應的 `mods/` 或 `plugins/` 資料夾
          3. 配置 MySQL 資料庫連接
          4. 重啟伺服器
          
          ### 文件下載說明
          - `*-fabric-*.jar` - Fabric 模組文件
          - `*-paper-*.jar` - Paper 插件文件
          - 文件名包含對應的 Minecraft 版本號
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    needs: [get-versions, test-units, build-matrix, test-fabric-server, test-paper-server, create-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Clean up
      run: |
        echo "🧹 構建完成，清理工作空間"
        echo "📊 構建摘要："
        echo "   - 支援版本: 1.21.4, 1.21.5, 1.21.6, 1.21.7, 1.21.8"
        echo "   - 平台: Fabric + Paper"
        echo "   - 總計 JAR 文件: 10 個"